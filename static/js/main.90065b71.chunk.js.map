{"version":3,"sources":["serviceWorker.js","components/robot.js","components/layout/errorBoundary.js","components/cards/Card.js","components/cards/CardList.js","components/layout/searchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Error","props","state","hasError","error","info","this","setState","children","Component","Card","className","src","alt","CardList","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","App","searchField","onSearchChange","bind","e","target","value","robotFiltered","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CClBOC,G,MAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4BCjCKC,E,YArBd,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACbC,UAAU,GAHM,E,+EAOAC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACJ,2CAEJG,KAAKL,MAAMO,a,GAlBFC,aCYLC,EAXF,SAAC,GAAsB,IAArBd,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAME,EAAU,EAAVA,MACvB,OACE,yBAAKY,UAAU,oDACb,yBAAKC,IAAG,+BAA0BhB,EAA1B,iBAA6CiB,IAAI,UACzD,6BACE,wBAAIF,UAAU,MAAMd,GACpB,2BAAIE,MCEGe,EATG,SAAC,GACjB,OAD6B,EAAXnB,OAEToB,KAAI,SAACC,EAAOC,GACjB,OACE,kBAAC,EAAD,CAAMC,IAAKF,EAAMpB,GAAIA,GAAIoB,EAAMpB,GAAIC,KAAMmB,EAAMnB,KAAME,MAAOiB,EAAMjB,YCQ3DoB,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKT,UAAU,OACX,2BACGA,UAAU,mCACXU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC6BLI,E,YA5Bb,WAAYvB,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXP,OAAOA,EACP8B,YAAY,IAEd,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANN,E,4EAQHC,GACbtB,KAAKC,SAAS,CAACkB,YAAYG,EAAEC,OAAOC,U,+BAG7B,IAAD,OACCC,EAAgBzB,KAAKJ,MAAMP,OAAOqC,QAAO,SAAChB,EAAOpB,GACtD,OAAOoB,EAAMnB,KAAKoC,cAAcC,SAAS,EAAKhC,MAAMuB,YAAYQ,kBAElE,OACE,yBAAKtB,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWS,aAAcd,KAAKoB,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU/B,OAAQoC,U,GAtBVtB,a,MCDlB0B,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SPyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.90065b71.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React, { Component } from 'react'\n\n\nclass Error extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n    hasError: false\n    }\n\n  }\n  componentDidCatch(error, info){\n    this.setState({hasError: true})\n  }\n\n  render() {\n\n    if (this.state.hasError){\n        return <h1 >Oup! Error </h1>\n      }\n    return this.props.children\n  }\n\n}\n\nexport default  Error;\n","import React  from 'react'\r\n\r\n\r\n\r\nconst Card = ({id, name, email}) =>{\r\n  return(\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n      <div>\r\n        <h2 className='tc'>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Card;\r\n","import React from 'react'\nimport Card from './Card';\n\nconst  CardList = ({robots}) =>{\n  return (\n    robots.map((robot, i)=>{\n      return (\n        <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\n      )\n    })\n  )\n}\nexport default CardList;\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className='pa3'>\r\n        <input \r\n           className='pa3 ba b--green bg-lightest-blue'\r\n          type='search' \r\n          placeholder='Recherche ...' \r\n          onChange={searchChange}\r\n          />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport {robots} from './components/robot';\nimport Error from './components/layout/errorBoundary'\nimport CardList from './components/cards/CardList';\nimport SearchBox from './components/layout/searchBox';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      robots:robots,\n      searchField:''\n    }\n    this.onSearchChange = this.onSearchChange.bind(this)\n  }\n  onSearchChange(e){\n    this.setState({searchField:e.target.value}); \n  }\n\n  render(){\n     const robotFiltered = this.state.robots.filter((robot, id) =>{\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f2'>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />    \n        <Error>\n          <CardList robots={robotFiltered} />\n        </Error>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App /> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}